{{#codegen}}
import 'package:riverpod_annotation/riverpod_annotation.dart';
part '{{name.snakeCase()}}_remote_source.g.dart';
{{/codegen}}

{{^codegen}}
{{#hooks}}
import 'package:hooks_riverpod/hooks_riverpod.dart';
{{/hooks}}
{{^hooks}}
import 'package:flutter_riverpod/flutter_riverpod.dart';
{{/hooks}}
{{/codegen}}


{{#codegen}}
@riverpod
{{name.pascalCase()}}RemoteSource {{name.camelCase()}}RemoteSource({{name.pascalCase()}}RemoteSourceRef ref) {
{{/codegen}}
{{^codegen}}
final {{name.camelCase()}}RemoteSourceProvider = Provider.autoDispose<{{name.pascalCase()}}RemoteSource>((ref) {
{{/codegen}}
  throw UnimplementedError("TODO: inject here your remote client (e.g. dioProvider)");
}
{{^codegen}}
);
{{/codegen}}


final class {{name.pascalCase()}}RemoteSource {
  const {{name.pascalCase()}}RemoteSource(this.remoteClient);
  final Never remoteClient;

  Never get{{name.pascalCase()}}() {
    throw UnimplementedError("TODO: use `remoteClient` to fetch data");
  }
}