{{#codegen}}
import 'package:riverpod_annotation/riverpod_annotation.dart';
part '{{name.snakeCase()}}_local_source.g.dart';
{{/codegen}}

{{^codegen}}
{{#hooks}}
import 'package:hooks_riverpod/hooks_riverpod.dart';
{{/hooks}}
{{^hooks}}
import 'package:flutter_riverpod/flutter_riverpod.dart';
{{/hooks}}
{{/codegen}}


{{#codegen}}
@riverpod
{{name.pascalCase()}}LocalSource {{name.camelCase()}}LocalSource({{name.pascalCase()}}LocalSourceRef ref) {
{{/codegen}}
{{^codegen}}
final {{name.camelCase()}}LocalSourceProvider = Provider.autoDispose<{{name.pascalCase()}}LocalSource>((ref) {
{{/codegen}}
  throw UnimplementedError("TODO: inject here your local client (e.g. sharedPrefsProvider)");
}
{{^codegen}}
);
{{/codegen}}


final class {{name.pascalCase()}}LocalSource {
  const {{name.pascalCase()}}LocalSource(this.localClient);
  final Never localClient;

  Never get{{name.camelCase()}}() {
    throw UnimplementedError("TODO: use `localClient` to fetch data");
  }
}